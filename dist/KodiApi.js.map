{"version":3,"sources":["webpack:///webpack/bootstrap 3d699a7b2ca5219270b2","webpack:///./src/KodiApi.js","webpack:///./src/JsonRpc.js","webpack:///./src/KodiApiConnection.js","webpack:///./src/KodiAddonApi.js","webpack:///./src/KodiApplicationApi.js","webpack:///./src/KodiAudioLibaryApi.js","webpack:///./src/KodiPlayerApi.js","webpack:///./src/KodiPlaylistApi.js","webpack:///./src/KodiGuiApi.js","webpack:///./src/KodiInputApi.js","webpack:///./src/KodiSystemApi.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;+CCtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0B;;;;;;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAK;AACL;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA,0B;;;;;;;ACrEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uCAAsC,4BAA4B;AAClE;AACA,MAAK;AACL;;AAEA;AACA;AACA;;AAEA;;AAEA,8C;;;;;;;ACpBA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,oC;;;;;;;ACxBA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,wDAAuD,aAAa;AACpE;;AAEA;AACA,0DAAyD,iBAAiB;AAC1E;AACA;AACA;AACA;AACA;;AAEA,gD;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAAyD,iBAAiB;AAC1E;AACA;AACA,iEAAgE,yCAAyC;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA,sDAAqD,qBAAqB;AAC1E;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA,kD;;;;;;;ACjHA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAkD,0BAA0B;AAC5E;AACA;AACA,yDAAwD,0BAA0B;AAClF;AACA;AACA,gDAA+C,oCAAoC;AACnF;AACA;AACA;AACA;;AAEA,gDAA+C,kDAAkD;AACjG;AACA;AACA,qDAAoD,wCAAwC;AAC5F;AACA;AACA,kDAAiD,0CAA0C;AAC3F;AACA;AACA,gDAA+C,0CAA0C;AACzF;AACA;AACA,0DAAyD,4CAA4C;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAuD,kDAAkD;AACzG;AACA;AACA;AACA;;AAEA,qDAAoD,4CAA4C;AAChG;AACA;AACA,sDAAqD,8CAA8C;AACnG;AACA;AACA,oDAAmD,0CAA0C;AAC7F;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,gDAA+C,0BAA0B;AACzE;AACA;AACA,gDAA+C,wCAAwC;AACvF;AACA;;AAEA,sC;;;;;;;ACzEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAgD,wCAAwC;AACxF;;AAEA;AACA,mDAAkD,6BAA6B;AAC/E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA,0C;;;;;;;AC7DA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA,sDAAqD,iBAAiB;AACtE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA,E;;;;;;AC9BA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,E;;;;;;AC/DA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,yDAAwD,uBAAuB;AAC/E;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,E","file":"KodiApi.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 3d699a7b2ca5219270b2\n **/","require('./JsonRpc.js');\nrequire('./KodiApiConnection.js');\nrequire('./KodiAddonApi.js');\nrequire('./KodiApplicationApi.js');\nrequire('./KodiAudioLibaryApi.js');\nrequire('./KodiPlayerApi.js');\nrequire('./KodiPlaylistApi.js');\nrequire('./KodiGuiApi.js');\nrequire('./KodiInputApi.js');\nrequire('./KodiSystemApi.js');\n\nfunction KodiApi(ip, port) {\n    var self = this;\n    this.connection = new KodiApiConnection(ip, port);\n    this.apis = [];\n}\n\nKodiApi.prototype.isApiInitiated = function(key, id) {\n    if(this.apis[key] == undefined)\n        return false;\n    else if(id != undefined && this.apis[key][id] === undefined)\n        return false;\n\n    return true;\n}\nKodiApi.prototype.get = function(key, id) {\n    key = key.toLowerCase();\n\n    if(!this.isApiInitiated(key, id))\n        this.initiateApi(key, id);\n\n    if(id != undefined)\n        return this.apis[key][id];\n\n    return this.apis[key];\n}\nKodiApi.prototype.initiateApi = function(key, id) {\n    switch(key) {\n        case 'addon':\n            this.apis[key][id] = new KodiAddonApi(this.connection, id);\n            break;\n        case 'application':\n            this.apis[key] = new KodiApplicationApi(this.connection);\n            break;\n        case 'player':\n            this.apis[key][id] = new KodiPlayerApi(this.connection, id);\n            break;\n        case 'playlist':\n            this.apis[key][id] = new KodiPlaylistApi(this.connection, id);\n            break;\n        case 'audiolibrary':\n            this.apis[key] = new KodiAudioLibraryApi(this.connection);\n            break;\n        case 'gui':\n            this.apis[key] = new KodiGuiApi(this.connection);\n            break;\n        case 'input':\n            this.apis[key] = new KodiGuiApi(this.connection);\n            break;\n        case 'system':\n            this.apis[key] = new KodiSystemApi(this.connection);\n            break;\n        default:\n            console.log('Error: Api not found ' + key);\n    }\n}\nglobal.KodiApi = KodiApi;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/KodiApi.js\n ** module id = 0\n ** module chunks = 0\n **/","class JsonRPC {\n  constructor(url) {\n    this.url = url;\n    this.socket = new WebSocket(url);\n    this.lastId = 0;\n    this.methodCalls = [];\n    this.onNotification = function() {};\n\n    this.socket.onmessage = function(event) {\n      let data = JSON.parse(event.data);\n\n      if(data.id === undefined)\n        return this.onNotification(data);\n\n      if(data.result != undefined) {\n        this.methodCalls[data.id].resolve(data);\n      }\n      else\n        this.methodCalls[data.id].reject(data);\n\n      delete this.methodCalls[data.id];\n    }.bind(this)\n  }\n  cmd(method, ...parameters) {\n    if(parameters.length === 1)\n      parameters = typeof parameters[0] === 'object' ? parameters[0] : parameters;\n\n    let requestObj = this.getRequestObject(method, parameters);\n\n    return new Promise(function(resolve, reject) {\n      this.waitForConnection(function () {\n        this.methodCalls[requestObj.id] = {\n          resolve: resolve,\n          reject: reject,\n          request: requestObj\n        };\n        // send request\n        this.socket.send(JSON.stringify(requestObj));\n      }.bind(this), 1000);\n    }.bind(this));\n  }\n  batch(cmds) {\n    // TODO\n  }\n  getRequestObject(method, parameters) {\n    return {\n      jsonrpc: \"2.0\",\n      method: method,\n      params: parameters,\n      id: this.nextId\n    }\n  }\n  get nextId() {\n    this.lastId = String(new Date().getTime()) + Math.floor((Math.random() * 100));;\n    return this.lastId;\n  }\n  waitForConnection(callback, interval) {\n    if (this.socket.readyState === 1) {\n      return callback();\n    } else {\n        var that = this;\n        // optional: implement backoff for interval here\n        setTimeout(function () {\n            that.waitForConnection(callback, interval);\n        }, interval);\n    }\n  }\n}\n\nglobal.JsonRPC = JsonRPC;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/JsonRpc.js\n ** module id = 1\n ** module chunks = 0\n **/","/** @preserve JsonRPC */\nclass KodiApiConnection extends JsonRPC {\n  constructor(host, port) {\n    super('ws://' + host + ':' + port + '/jsonrpc');\n\n    this.host = host;\n    this.port = port;\n    this.onNotification = function(data) {\n      document.dispatchEvent(\n        new CustomEvent(data.method, {detail: data, bubbles: true})\n      );\n    }.bind(this);\n  }\n  \n  getUrl(host, port) {\n    return 'ws://' + host + ':' + port + '/jsonrpc'\n  }\n\n}\n\nglobal.KodiApiConnection = KodiApiConnection;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/KodiApiConnection.js\n ** module id = 2\n ** module chunks = 0\n **/","class KodiAddonApi {\n\n  constructor(connection, addonId) {\n    this.connection = connection;\n    this.addonId = addonId;\n  }\n\n  static getAddons(connection) {\n    return connection.cmd('Addon.GetAddons');\n  }\n\n  executeAddon(params = null, wait = false) {\n    return this.connection.cmd('Addons.ExecuteAddon');\n  }\n\n  getAddonDetails() {\n    return this.connection.cmd('Addons.GetAddonDetails');\n  }\n\n  setAddonEnabled() {\n    return this.connection.cmd('Addons.SetAddonEnabled');\n  }\n}\n\nglobal.KodiAddonApi = KodiAddonApi;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/KodiAddonApi.js\n ** module id = 3\n ** module chunks = 0\n **/","class KodiApplicationApi {\n  constructor(connection) {\n    this.connection = connection;\n  }\n\n  quit() {\n    return this.connection.cmd('Application.Quit');\n  }\n  \n  setMute(mute = 'toggle') {\n    return this.connection.cmd('Application.SetMute', {'mute': mute});\n  }\n\n  setVolume(volume) {\n    return this.connection.cmd('Application.SetVolume', {'volume': volume});\n  }\n  getProperties(properties) {\n    return this.connection.cmd('Application.GetProperties', [properties]);\n  }\n}\n\nglobal.KodiApplicationApi = KodiApplicationApi;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/KodiApplicationApi.js\n ** module id = 4\n ** module chunks = 0\n **/","class KodiAudioLibraryApi {\n  constructor(connection) {\n    this.connection = connection;\n  }\n  clean() {\n    return this.connection.cmd('AudioLibrary.Clean');\n  }\n  export(options = undefined) {\n    if(options === undefined)\n      return this.connection.cmd('AudioLibrary.export');\n    else\n      return this.connection.cmd('AudioLibrary.export', {options: options});\n  }\n  getAlbumDetails(albumid, properties = undefined) {\n    return this.connection.cmd('AudioLibrary.GetAlbumDetails', {albumid: albumid, properties: properties});\n  }\n  getAlbums(properties, limits, sort, filter) {\n    return this.connection.cmd('AudioLibrary.GetAlbums', {\n      properties: properties,\n      limits: limits,\n      sort: sort,\n      filter: filter\n    });\n  }\n  getArtistDetails(artistid, properties) {\n    return this.connection.cmd('AudioLibrary.GetArtistDetails', {\n      artistid: artistid, properties: properties\n    })\n  }\n  getArtists(properties, albumartistsonly = null, limits, sort, filter) {\n    return this.connection.cmd('AudioLibrary.GetArtists', {\n      albumartistsonly: albumartistsonly,\n      properties: properties,\n      limits: limits,\n      sort: sort,\n      filter: filter\n    });\n  }\n  getGenres(properties, limits, sort) {\n    return this.connection.cmd('AudioLibrary.GetGenres', {\n      properties: properties,\n      limits: limits,\n      sort: sort\n    })\n  }\n  getRecentlyAddedAlbums(properties, limits, sort) {\n    return this.connection.cmd('AudioLibrary.GetRecentlyAddedAlbums', {\n      properties: properties,\n      limits: limits,\n      sort: sort\n    })\n  }\n  getRecentlyAddedSongs(albumlimit = -1, properties, limits, sort) {\n    return this.connection.cmd('AudioLibrary.GetRecentlyAddedAlbums', {\n      albumlimit: albumlimit,\n      properties: properties,\n      limits: limits,\n      sort: sort\n    })\n  }\n  getRecentlyPlayedAlbums(properties, limits, sort) {\n    return this.connection.cmd('AudioLibrary.GetRecentlyPlayedAlbums', {\n      properties: properties,\n      limits: limits,\n      sort: sort\n    })\n  }\n  getRecentlyPlayedSongs(properties, limits, sort) {\n    return this.connection.cmd('AudioLibrary.GetRecentlyPlayedAlbums', {\n      properties: properties,\n      limits: limits,\n      sort: sort\n    })\n  }\n  getSongDetails(songid, properties) {\n    return this.connection.cmd('AudioLibrary.GetSongDetails', {\n      properties: properties,\n      songid: songid\n    });\n  }\n  \n  getSongs(properties, limits, sort, filter) {\n    return this.connection.cmd('AudioLibrary.GetSongs', {\n      properties: properties,\n      limits: limits,\n      sort: sort,\n      filter: filter\n    });\n  }\n  \n  scan(directory = \"\") {\n    return this.connection.cmd('AudioLibrary.Scan', {direction: direction});\n  }\n  \n  setAlbumDetails(albumid, properties) {\n    properties.albumid = albumid;\n\n    return this.connection.cmd('AudioLibrary.SetAlbumDetails', properties);\n  }\n\n  setArtistDetails(albumid, properties) {\n    properties.albumid = albumid;\n\n    return this.connection.cmd('AudioLibrary.SetArtistDetails', properties);\n  }\n  setSongDetails(albumid, properties) {\n    properties.albumid = albumid;\n\n    return this.connection.cmd('AudioLibrary.SetSongDetails', properties);\n  }\n}\n\n\nglobal.KodiAudioLibraryApi = KodiAudioLibraryApi;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/KodiAudioLibaryApi.js\n ** module id = 5\n ** module chunks = 0\n **/","class KodiPlayerApi {\n  //const DIRECTIONS = [\"left\", \"right\", \"up\", \"down\"];\n\n  constructor(connection, playerId) {\n    this.connection = connection;\n    this.playerId = playerId;\n    this.DIRECTIONS = [\"left\", \"right\", \"up\", \"down\"];\n    this.REPEAT = ['off', 'one', 'all', 'circle'];\n  }\n  static getActivePlayers(connection) {\n    return connection.cmd('Player.GetActivePlayers');\n  }\n  getCurrentItem() {\n    return this.connection.cmd('Player.GetItem', {\"playerid\": this.playerId});\n  }\n  getProperties() {\n    return this.connection.cmd('Player.GetProperties', {\"playerid\": this.playerId});\n  }\n  goTo(to) {\n    return this.connection.cmd('Player.GoTo', {\"playerid\": this.playerId, \"to\": to});\n  }\n  move(direction) {\n    if(this.DIRECTIONS.indexOf(direction) === -1)\n      throw \"Invalid direction. Possible directions: \" + this.DIRECTIONS.join(',');\n\n    return this.connection.cmd('Player.GoTo', {\"playerid\": this.playerId, \"direction\": direction});\n  }\n  playPause(play = 'toggle') {\n    return this.connection.cmd('Player.PlayPause', {\"playerid\": this.playerId, \"play\": play});\n  }\n  rotate(value = \"clockwise\") {\n    return this.connection.cmd('Player.Rotate', {\"playerid\": this.playerId, \"value\": value});\n  }\n  seek(value) {\n    return this.connection.cmd('Player.Seek', {\"playerid\": this.playerId, \"value\": value});\n  }\n  setAudioStream(stream) {\n    return this.connection.cmd('Player.SetAudioStream', {\"playerid\": this.playerId, \"stream\": stream});\n  }\n  next() {\n    return this.setAudioStream('next');\n  }\n  previous() {\n    return this.setAudioStream('previous');\n  }\n  setPartyMode(partymode) {\n    return this.connection.cmd('Player.SetPartyMode', {\"playerid\": this.playerId, \"partymode\": partymode});\n  }\n  setRepeat(repeat) {\n    if(this.REPEAT.indexOf(repeat) === -1)\n      throw \"Invalid parameter. Possible parameters: \" + this.REPEAT.join(',');\n\n    return this.connection.cmd('Player.SetRepeat', {\"playerid\": this.playerId, \"repeat\": repeat});\n  }\n  setShuffel(shuffle) {\n    return this.connection.cmd('Player.SetShuffel', {\"playerid\": this.playerId, \"shuffle\": shuffle});\n  }\n  setSpeed(speed) {\n    return this.connection.cmd('Player.SetSpeed', {\"playerid\": this.playerId, \"speed\": speed});\n  }\n  setSubtitle(subtitle, enable = false) {\n    return this.connection.cmd('Player.SetSubtitle', {\n      \"playerid\": this.playerId, \"subtitle\": subtitle, \"enable\": enable\n    });\n  }\n  stop() {\n    return this.connection.cmd('Player.Stop', {\"playerid\": this.playerId});\n  }\n  zoom(zoom) {\n    return this.connection.cmd('Player.Stop', {\"playerid\": this.playerId, 'zoom': zoom});\n  }\n}\n\nglobal.KodiPlayerApi = KodiPlayerApi;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/KodiPlayerApi.js\n ** module id = 6\n ** module chunks = 0\n **/","class KodiPlaylistApi {\n  constructor(connection, playlistId) {\n    this.connection = connection;\n    this.playlistid = playlistId;\n  }\n\n  static getPlaylists(connection) {\n    return connection.cmd('Playlist.GetPlaylists');\n  }\n  /**\n   * @param Playlist.Item\n   */\n  add(item) {\n    return this.connection.cmd('Playlist.Add', {playlistid: this.playlistid, item: item});\n  }\n\n  clear() {\n    return this.connection.cmd('Playlist.Clear', {playlistid: this.playlistid });\n  }\n\n  getItems(properties, limits, sort) {\n    return this.connection.cmd('Playlist.GetItems', {\n      playlistid: this.playlistid,\n      properties: properties,\n      limits: limits,\n      sort: sort\n    });\n  }\n\n  getProperties(properties) {\n    return this.connection.cmd('Playlist.GetProperties', {\n      playlistid: this.playlistid,\n      properties: properties\n    });\n  }\n\n  insert(position, item) {\n    return this.connection.cmd('Playlist.Insert', {\n      playlistid: this.playlistid,\n      position: position,\n      item: item\n    });\n  }\n  insertLast(item) {\n    return this.insert(-1, item);\n  }\n  remove(position) {\n    return this.connection.cmd('Playlist.Remove', {\n      playlistid: this.playlistid,\n      position: position\n    });\n  }\n  swap(position1, position2) {\n    return this.connection.cmd('Playlist.Swap', {\n      playlistid: this.playlistid,\n      position1: position1,\n      position2: position2\n    });\n  }\n}\n\nglobal.KodiPlaylistApi = KodiPlaylistApi;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/KodiPlaylistApi.js\n ** module id = 7\n ** module chunks = 0\n **/","class KodiGuiApi {\n  constructor(connection) {\n    this.connection = connection;\n  }\n\n  activateWindow(window, parameters) {\n    return this.connection.cmd('GUI.ActivateWindow', {\n      window: window,\n      parameters: parameters\n    });\n  }\n\n  getProperties(properties) {\n    return this.connection.cmd('GUI.GetProperties', {\n      properties: properties\n    });\n  }\n\n  setFullscreen(toggle = 'toggle') {\n    return this.connection.cmd('GUI.SetFullscreen', { toggle: toggle });\n  }\n\n  showNotification(title, message, image, displaytime = 5000) {\n    return this.connection.cmd('GUI.ShowNotification', {\n      title: title,\n      message: message, \n      image: image,\n      displaytime: displaytime\n    })\n  }\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/KodiGuiApi.js\n ** module id = 8\n ** module chunks = 0\n **/","class KodiInputApi {\n  constructor(connection) {\n    this.connection = connection;\n  }\n\n  back() {\n    return this.connection.cmd('Input.Back');\n  }\n\n  contextMenu() {\n    return this.connection.cmd('Input.ContextMenu');\n  }\n\n  up() {\n    return this.connection.cmd('Input.Up');\n  }\n\n  down() {\n    return this.connection.cmd('Input.Down');\n  }\n\n  executeAction() {\n    return this.connection.cmd('Input.ExecuteAction');\n  }\n\n  executeAction() {\n    return this.connection.cmd('Input.ExecuteAction');\n  }\n\n  home() {\n    return this.connection.cmd('Input.Home');\n  }\n\n  info() {\n    return this.connection.cmd('Input.Info');\n  }\n\n  left() {\n    return this.connection.cmd('Input.Left');\n  }\n\n  right() {\n    return this.connection.cmd('Input.Right');\n  }\n\n  select() {\n    return this.connection.cmd('Input.Select');\n  }\n\n  sendText(text, done = true) {\n    return this.connection.cmd('Input.SendText', {\n      text: text,\n      done: done\n    });\n  }\n\n  showCodec() {\n    return this.connection.cmd('Input.ShowCodec');\n  }\n\n  showOSD() {\n    return this.connection.cmd('Input.ShowOSD');\n  }\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/KodiInputApi.js\n ** module id = 9\n ** module chunks = 0\n **/","class KodiSystemApi {\n  constructor(connection) {\n    this.connection = connection;\n  }\n\n  ejectOpticalDrive() {\n    return this.connection.cmd('System.EjectOpticalDrive');\n  }\n\n  getProperties(properties) {\n    return this.connection.cmd('System.GetProperties', {properties: properties});\n  }\n\n  hibernate() {\n    return this.connection.cmd('System.Hibernate');\n  }\n\n  reboot() {\n    return this.connection.cmd('System.Reboot');\n  }\n\n  shutdown() {\n    return this.connection.cmd('System.Shutdown');\n  }\n  \n  suspend() {\n    return this.connection.cmd('System.Suspend');\n  }\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/KodiSystemApi.js\n ** module id = 10\n ** module chunks = 0\n **/"],"sourceRoot":""}